{"version":3,"sources":["features/crypto-prices/CryptoPricesDropdown.tsx","features/crypto-prices/consts.ts","components/Table.ts","features/crypto-prices/CryptoPricesTable.tsx","helpers/indicator.tsx","features/crypto-prices/CryptoPrices.tsx"],"names":["CryptoPricesDropdown","dispatch","useDispatch","data","useSelector","selectCryptos","addedCryptos","selectAddedCryptos","options","useMemo","filter","crypto","includes","map","label","symbol","value","isDisabled","length","onChange","addCryptos","placeholder","undefined","Table","styled","table","TableHead","thead","TableBody","tbody","fadeInAnimation","keyframes","AnimatedTableBody","CryptoPrices","children","useEffect","slice","colSpan","className","cmcRank","priceUSD","toLocaleString","currency","style","disabled","onClick","removeCrypto","indicator","isLoading","error","Loading","fetchCryptos","CryptoPricesTable"],"mappings":"iMA8CeA,EAjCc,WAC3B,IAAMC,EAAWC,cAETC,EAASC,YAAYC,KAArBF,KACFG,EAAeF,YAAYG,KAE3BC,EAAUC,mBACd,kBACE,OAACN,QAAD,IAACA,IAAQ,IACNO,QAAO,SAACC,GAAD,OAAaL,EAAaM,SAASD,MAC1CE,KAAI,SAACF,GAEJ,MAAO,CACLG,MAFiBH,EAAXI,OAGNC,MAAOL,QAGf,CAACL,EAAcH,IAGXc,EC/B6B,KD+BhBX,EAAaY,OAEhC,OACE,cAAC,IAAD,CACED,WAAYA,EACZE,SAAU,gBAAGH,EAAH,EAAGA,MAAH,OAAuBf,EAASmB,YAAW,CAACJ,MACtDR,QAASA,EACTa,YAAaJ,EAAa,sBAAmBK,EAC7CN,MAAO,Q,ogBEvCb,IAAMO,EAAQC,IAAOC,MAAV,KAgBEC,EAAYF,IAAOG,MAAV,KAITC,EAAYJ,IAAOK,MAAV,KAMPN,I,oPCff,IAAMO,EAAkBC,YAAH,KASfC,EAAoBR,YAAOI,EAAPJ,CAAH,IAENM,GAyDFG,EArDU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpBjC,EAAWC,cAETC,EAASC,YAAYC,KAArBF,KACFG,EAAeF,YAAYG,KAQjC,OANA4B,qBAAU,WACJhC,IAASG,EAAaY,QACxBjB,EAASmB,YAAWjB,EAAKiC,MAAM,EFpCI,OEsCpC,CAAC9B,EAAcH,EAAMF,IAGtB,eAAC,EAAD,WACE,eAACyB,EAAD,WACGQ,GACC,6BACE,oBAAIG,QAAS,EAAb,SAAiBH,MAGrB,+BACE,oBAAII,UAAU,WAAd,sBACA,wCACA,oBAAIA,UAAU,WAAd,wBACA,6BAGJ,cAACN,EAAD,UACG1B,EAAaO,KAAI,gBAAG0B,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAUzB,EAAtB,EAAsBA,OAAtB,OAChB,+BACE,oBAAIuB,UAAU,WAAd,SAA0BC,EAAQE,mBAClC,6BAAK1B,IACL,oBAAIuB,UAAU,WAAd,SACGE,EAASC,oBAAenB,EAAW,CAClCoB,SAAU,MACVC,MAAO,eAGX,6BACE,wBACEC,SAAUtC,EAAaY,QFhEF,EEiErB2B,QAAS,kBAAM5C,EAAS6C,YAAa/B,KAFvC,wBAVKA,Y,QCzCJgC,EAZG,SAACC,EAAqBC,GACtC,OAAKD,GAAcC,EAIjB,qCACGA,GAAS,4BAAIA,IACbD,GAAa,cAACE,EAAA,EAAD,OALT,MCqBIjB,UAlBM,WAAO,IAAD,EACnBhC,EAAWC,cADQ,EAGIE,YAAYC,KAAjC4C,EAHiB,EAGjBA,MAAOD,EAHU,EAGVA,UAMf,OAJAb,qBAAU,WACRlC,EAASkD,iBACR,CAAClD,IAEJ,UACE8C,EAAUC,EAAWC,UADvB,QAEI,cAACG,EAAD,UACE,cAAC,EAAD","file":"static/js/4.40833783.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport Select from \"react-select-virtualized\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Crypto from \"features/cryptos/Crypto\";\nimport { addCryptos, selectAddedCryptos } from \"./cryptoPricesSlice\";\nimport { addedCryptosMaxLength } from \"./consts\";\nimport { selectCryptos } from \"features/cryptos/cryptosSlice\";\n\ninterface Option {\n  value: Crypto;\n}\n\nconst CryptoPricesDropdown = () => {\n  const dispatch = useDispatch();\n\n  const { data } = useSelector(selectCryptos);\n  const addedCryptos = useSelector(selectAddedCryptos);\n\n  const options = useMemo(\n    () =>\n      (data ?? [])\n        .filter((crypto) => !addedCryptos.includes(crypto))\n        .map((crypto) => {\n          const { symbol } = crypto;\n          return {\n            label: symbol,\n            value: crypto,\n          };\n        }),\n    [addedCryptos, data]\n  );\n\n  const isDisabled = addedCryptos.length === addedCryptosMaxLength;\n\n  return (\n    <Select\n      isDisabled={isDisabled}\n      onChange={({ value }: Option) => dispatch(addCryptos([value]))}\n      options={options}\n      placeholder={isDisabled ? \"Can't add more\" : undefined}\n      value={null}\n    />\n  );\n};\n\nexport default CryptoPricesDropdown;\n","export const addedCryptosInitialLength = 5;\n\nexport const addedCryptosMaxLength = 10;\n\nexport const addedCryptosMinLength = 1;\n","import styled from \"styled-components\";\n\nconst Table = styled.table`\n  border: solid thin;\n  border-collapse: collapse;\n  th,\n  td {\n    border: solid thin;\n    padding: 0.5em;\n    &.is-right {\n      text-align: right;\n    }\n  }\n  th {\n    text-align: center;\n  }\n`;\n\nexport const TableHead = styled.thead`\n  background: #e0e0e0;\n`;\n\nexport const TableBody = styled.tbody`\n  > :nth-child(even) {\n    background: #f2f2f2;\n  }\n`;\n\nexport default Table;\n","import React, { FC, useEffect } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Table, { TableBody, TableHead } from \"components/Table\";\nimport {\n  addCryptos,\n  removeCrypto,\n  selectAddedCryptos,\n} from \"./cryptoPricesSlice\";\nimport { addedCryptosInitialLength, addedCryptosMinLength } from \"./consts\";\nimport { selectCryptos } from \"features/cryptos/cryptosSlice\";\n\nconst fadeInAnimation = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nconst AnimatedTableBody = styled(TableBody)`\n  > * {\n    animation: ${fadeInAnimation} 0.3s;\n  }\n`;\n\nconst CryptoPrices: FC = ({ children }) => {\n  const dispatch = useDispatch();\n\n  const { data } = useSelector(selectCryptos);\n  const addedCryptos = useSelector(selectAddedCryptos);\n\n  useEffect(() => {\n    if (data && !addedCryptos.length) {\n      dispatch(addCryptos(data.slice(0, addedCryptosInitialLength)));\n    }\n  }, [addedCryptos, data, dispatch]);\n\n  return (\n    <Table>\n      <TableHead>\n        {children && (\n          <tr>\n            <td colSpan={4}>{children}</td>\n          </tr>\n        )}\n        <tr>\n          <th className=\"is-right\">CMC Rank</th>\n          <th>Symbol</th>\n          <th className=\"is-right\">Price, USD</th>\n          <th />\n        </tr>\n      </TableHead>\n      <AnimatedTableBody>\n        {addedCryptos.map(({ cmcRank, priceUSD, symbol }) => (\n          <tr key={symbol}>\n            <td className=\"is-right\">{cmcRank.toLocaleString()}</td>\n            <td>{symbol}</td>\n            <td className=\"is-right\">\n              {priceUSD.toLocaleString(undefined, {\n                currency: \"USD\",\n                style: \"currency\",\n              })}\n            </td>\n            <td>\n              <button\n                disabled={addedCryptos.length <= addedCryptosMinLength}\n                onClick={() => dispatch(removeCrypto(symbol))}\n              >\n                Remove\n              </button>\n            </td>\n          </tr>\n        ))}\n      </AnimatedTableBody>\n    </Table>\n  );\n};\n\nexport default CryptoPrices;\n","import React from \"react\";\n\nimport Loading from \"components/Loading\";\n\nconst indicator = (isLoading?: boolean, error?: string) => {\n  if (!isLoading && !error) {\n    return null;\n  }\n  return (\n    <>\n      {error && <p>{error}</p>}\n      {isLoading && <Loading />}\n    </>\n  );\n};\n\nexport default indicator;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport CryptoPricesDropdown from \"./CryptoPricesDropdown\";\nimport CryptoPricesTable from \"./CryptoPricesTable\";\nimport indicator from \"helpers/indicator\";\nimport { fetchCryptos } from \"features/cryptos/cryptosSlice\";\nimport { selectCryptos } from \"features/cryptos/cryptosSlice\";\n\nconst CryptoPrices = () => {\n  const dispatch = useDispatch();\n\n  const { error, isLoading } = useSelector(selectCryptos);\n\n  useEffect(() => {\n    dispatch(fetchCryptos());\n  }, [dispatch]);\n\n  return (\n    indicator(isLoading, error) ?? (\n      <CryptoPricesTable>\n        <CryptoPricesDropdown />\n      </CryptoPricesTable>\n    )\n  );\n};\n\nexport default CryptoPrices;\n"],"sourceRoot":""}